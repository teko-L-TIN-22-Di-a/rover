{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Space Rover Documentation tbd","title":"Home"},{"location":"#space-rover-documentation","text":"tbd","title":"Space Rover Documentation"},{"location":"about/","text":"About","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"mkdocs/","text":"Build documentation with mkdocs Commands Execute the following commands in powershell. mkdir mkdocs-documentation cd mkdocs-documentation python -m venv venv venv\\Scripts\\activate python -m pip install mkdocs python -m pip install \"mkdocstrings[python]\" python -m pip install mkdocs-material mkdocs new . mkdocs serve For a full tutorial see python-project-documentation-with-mkdocs . Cinder Theme cinder is a theme we used to build our documentation.","title":"mkdocs"},{"location":"mkdocs/#build-documentation-with-mkdocs","text":"","title":"Build documentation with mkdocs"},{"location":"mkdocs/#commands","text":"Execute the following commands in powershell. mkdir mkdocs-documentation cd mkdocs-documentation python -m venv venv venv\\Scripts\\activate python -m pip install mkdocs python -m pip install \"mkdocstrings[python]\" python -m pip install mkdocs-material mkdocs new . mkdocs serve For a full tutorial see python-project-documentation-with-mkdocs .","title":"Commands"},{"location":"mkdocs/#cinder-theme","text":"cinder is a theme we used to build our documentation.","title":"Cinder Theme"},{"location":"python/","text":"How we used Python Here are some best-practices for python. Constructs we use init Is like the constructor for Java / C#. main \u2014 Top-level code environment What is the \u201ctop-level code environment\u201d? __main__ is the name of the environment where top-level code is run. It's the first Python module which starts running. It's the entry point of the application. source Property Decorator For creating properties, we used the Property Decorator . Modules A module can be a collection of classes. Classes Rover is a class (can be more than one) map is also a class window is also a class (need inheritance from tk) Inheritance in Python See Inheritance for more information. To call the parent method use the super() keyword. To call the current method of the class, use the self keyword. Naming styles Overview Type Public Internal Packages lowernounder Modules lower_with_under _lower_with_under Classes CapWords _CapWords Exceptions CapWords or CapWordsError Functions lower_with_under() _lower_with_under() Class Constants CAPS_WITH_UNDER _CAPS_WITH_UNDER Class Variables lower_with_under _lower_with_under Instance Variables lower_with_under _lower_with_under (protected) or __lower_with_under (private) Method Names lower_with_under(self) _lower_with_under(self) (protected) or __lower_with_under(self) (private) Function/Method Parameters lower_with_under Local Variables lower_with_under Real Pyhton naming styles Private variables doesn't exists in python, you just give them a different name. Single and double underscore Single Trailing Underscore( var_ ): Used by convention to avoid naming conflicts with Python keywords. Double Leading Underscore( __var ): Triggers name mangling when used in a class context. Enforced by the Python interpreter.","title":"Python"},{"location":"python/#how-we-used-python","text":"Here are some best-practices for python.","title":"How we used Python"},{"location":"python/#constructs-we-use","text":"","title":"Constructs we use"},{"location":"python/#init","text":"Is like the constructor for Java / C#.","title":"init"},{"location":"python/#main-top-level-code-environment","text":"","title":"main \u2014 Top-level code environment"},{"location":"python/#what-is-the-top-level-code-environment","text":"__main__ is the name of the environment where top-level code is run. It's the first Python module which starts running. It's the entry point of the application. source","title":"What is the \u201ctop-level code environment\u201d?"},{"location":"python/#property-decorator","text":"For creating properties, we used the Property Decorator .","title":"Property Decorator"},{"location":"python/#modules","text":"A module can be a collection of classes.","title":"Modules"},{"location":"python/#classes","text":"Rover is a class (can be more than one) map is also a class window is also a class (need inheritance from tk)","title":"Classes"},{"location":"python/#inheritance-in-python","text":"See Inheritance for more information. To call the parent method use the super() keyword. To call the current method of the class, use the self keyword.","title":"Inheritance in Python"},{"location":"python/#naming-styles","text":"","title":"Naming styles"},{"location":"python/#overview","text":"Type Public Internal Packages lowernounder Modules lower_with_under _lower_with_under Classes CapWords _CapWords Exceptions CapWords or CapWordsError Functions lower_with_under() _lower_with_under() Class Constants CAPS_WITH_UNDER _CAPS_WITH_UNDER Class Variables lower_with_under _lower_with_under Instance Variables lower_with_under _lower_with_under (protected) or __lower_with_under (private) Method Names lower_with_under(self) _lower_with_under(self) (protected) or __lower_with_under(self) (private) Function/Method Parameters lower_with_under Local Variables lower_with_under Real Pyhton naming styles Private variables doesn't exists in python, you just give them a different name.","title":"Overview"},{"location":"python/#single-and-double-underscore","text":"Single Trailing Underscore( var_ ): Used by convention to avoid naming conflicts with Python keywords. Double Leading Underscore( __var ): Triggers name mangling when used in a class context. Enforced by the Python interpreter.","title":"Single and double underscore"},{"location":"architecture/diagrams/","text":"Diagrams Pyreverse Generate Class Diagram with pyreverse . pyreverse -o puml spacerover -m y","title":"Diagrams"},{"location":"architecture/diagrams/#diagrams","text":"","title":"Diagrams"},{"location":"architecture/diagrams/#pyreverse","text":"Generate Class Diagram with pyreverse . pyreverse -o puml spacerover -m y","title":"Pyreverse"},{"location":"architecture/overview/","text":"Architecture Workflows rover can move forward / backwards / left / right. (if one movement should be deactivated, they have to be splitted worklows) When roves is moved, there has to be a check if move is possible or blocked because of an obstacle. Dependencies All imported Modules which are not created by us, will be wrapped. This makes it easy to replace them with other ones and the dependency are clear. Method naming Method names should be an extended description on what the method actually does. Long method names are allowed. Class Diagram Packages","title":"Overview"},{"location":"architecture/overview/#architecture","text":"","title":"Architecture"},{"location":"architecture/overview/#workflows","text":"rover can move forward / backwards / left / right. (if one movement should be deactivated, they have to be splitted worklows) When roves is moved, there has to be a check if move is possible or blocked because of an obstacle.","title":"Workflows"},{"location":"architecture/overview/#dependencies","text":"All imported Modules which are not created by us, will be wrapped. This makes it easy to replace them with other ones and the dependency are clear.","title":"Dependencies"},{"location":"architecture/overview/#method-naming","text":"Method names should be an extended description on what the method actually does. Long method names are allowed.","title":"Method naming"},{"location":"architecture/overview/#class-diagram","text":"","title":"Class Diagram"},{"location":"architecture/overview/#packages","text":"","title":"Packages"}]}