{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Space Rover Documentation This is the technical documentation for our space rover game we programmed as a project at our education we're currently on at the TEKO Schweizerische Fachschule . We are very grateful that we have te opportunity to do this education and we can get a lot of practical knowledge. A big thank you to our teacher Bruno Hammer who accompanied us through this work and saved us a lot of unnecessary work. In this documentation we only describe the technical rules and architecture, everything that is code related is described here. We also created a projectmanagement documentation in which is the process described about everything project related. We deliberately made a cut so that we have a clear separation between code and project. This codebase is not intendet to get updated soon. But feel free to send us your improvements if you want to. We are open for new ideas. For more information have a look at the contribute page . About The game space rover is just in the beginning to grow. The idea is to create a game, where a rover can drive through a map and doesn't hit the obstacles. It has a start- and endpoint. If the rover hits the endpoint, the level is finished. In fututre releases, we want to implement some enemies the rover has to shoot down. There should also be a ranking at the end of the game, to compare the time with other players. Adding some soundeffects is also something we're tinking of implementing.","title":"Home"},{"location":"#space-rover-documentation","text":"This is the technical documentation for our space rover game we programmed as a project at our education we're currently on at the TEKO Schweizerische Fachschule . We are very grateful that we have te opportunity to do this education and we can get a lot of practical knowledge. A big thank you to our teacher Bruno Hammer who accompanied us through this work and saved us a lot of unnecessary work. In this documentation we only describe the technical rules and architecture, everything that is code related is described here. We also created a projectmanagement documentation in which is the process described about everything project related. We deliberately made a cut so that we have a clear separation between code and project. This codebase is not intendet to get updated soon. But feel free to send us your improvements if you want to. We are open for new ideas. For more information have a look at the contribute page .","title":"Space Rover Documentation"},{"location":"#about","text":"The game space rover is just in the beginning to grow. The idea is to create a game, where a rover can drive through a map and doesn't hit the obstacles. It has a start- and endpoint. If the rover hits the endpoint, the level is finished. In fututre releases, we want to implement some enemies the rover has to shoot down. There should also be a ranking at the end of the game, to compare the time with other players. Adding some soundeffects is also something we're tinking of implementing.","title":"About"},{"location":"contribute/","text":"How to contribute You have a cool idea or you found a bug in our code? Please feel free to create a fork of our repository and create a Pull Request . If you're new to pyhton, here's a guide how to contribute to our repository and get a part of our space rover game. Step by step guide to contribute 1. Create a Fork We use the Gitflow Workflow . The first thing you need to do is create a fork of our repository. 2. Clone repository Next step, you need to clone your forked repository to your local machine. git clone <repositoryUrl> 3. Setup your environment We recommend working with Visual Studio Code. Have a look into the vs code installation guide and follow the steps. 4. Install dependencies Download latest [pyhton] version and click through installation. Maybe you have to restart your machine after this step. Run the following commands to install the dependencies we used. PyGame pip install pygame MkDocs pip install mkdocs For more information how to run mkdocs and how we used it, have a look at [mkdocs.md]","title":"contribute"},{"location":"contribute/#how-to-contribute","text":"You have a cool idea or you found a bug in our code? Please feel free to create a fork of our repository and create a Pull Request . If you're new to pyhton, here's a guide how to contribute to our repository and get a part of our space rover game.","title":"How to contribute"},{"location":"contribute/#step-by-step-guide-to-contribute","text":"","title":"Step by step guide to contribute"},{"location":"contribute/#1-create-a-fork","text":"We use the Gitflow Workflow . The first thing you need to do is create a fork of our repository.","title":"1. Create a Fork"},{"location":"contribute/#2-clone-repository","text":"Next step, you need to clone your forked repository to your local machine. git clone <repositoryUrl>","title":"2. Clone repository"},{"location":"contribute/#3-setup-your-environment","text":"We recommend working with Visual Studio Code. Have a look into the vs code installation guide and follow the steps.","title":"3. Setup your environment"},{"location":"contribute/#4-install-dependencies","text":"Download latest [pyhton] version and click through installation. Maybe you have to restart your machine after this step. Run the following commands to install the dependencies we used.","title":"4. Install dependencies"},{"location":"contribute/#pygame","text":"pip install pygame","title":"PyGame"},{"location":"contribute/#mkdocs","text":"pip install mkdocs For more information how to run mkdocs and how we used it, have a look at [mkdocs.md]","title":"MkDocs"},{"location":"mkdocs/","text":"Build documentation with mkdocs Commands Execute the following commands in powershell. cd docs python -m venv venv venv\\Scripts\\activate python -m pip install mkdocs python -m pip install \"mkdocstrings[python]\" python -m pip install mkdocs-material mkdocs new . mkdocs serve For a full tutorial see python-project-documentation-with-mkdocs . Publish mkdocs to github pages Execute this command locally on your branch you want to publish: mkdocs gh-deploy . Full documentation here Deploy mkdocs to GitHub Pages . Cinder Theme cinder is a theme we used to build our documentation.","title":"mkdocs"},{"location":"mkdocs/#build-documentation-with-mkdocs","text":"","title":"Build documentation with mkdocs"},{"location":"mkdocs/#commands","text":"Execute the following commands in powershell. cd docs python -m venv venv venv\\Scripts\\activate python -m pip install mkdocs python -m pip install \"mkdocstrings[python]\" python -m pip install mkdocs-material mkdocs new . mkdocs serve For a full tutorial see python-project-documentation-with-mkdocs .","title":"Commands"},{"location":"mkdocs/#publish-mkdocs-to-github-pages","text":"Execute this command locally on your branch you want to publish: mkdocs gh-deploy . Full documentation here Deploy mkdocs to GitHub Pages .","title":"Publish mkdocs to github pages"},{"location":"mkdocs/#cinder-theme","text":"cinder is a theme we used to build our documentation.","title":"Cinder Theme"},{"location":"python/","text":"How we used Python Here are some best-practices for python. Constructs we use __init__ Is the constructor for a class. __main__ \u2014 Top-level code environment __main__ is the name of the environment where top-level code is run. It's the first Python module which starts running. It's the entry point of the application. See source for more information. Property Decorator For creating properties, we used the Property Decorator . Modules A module can be a collection of classes. Classes Rover is a class (can be more than one) map is also a class window is also a class (need inheritance from tk) Inheritance in Python See Inheritance for more information. To call the parent method use the super() keyword. To call the current method of the class, use the self keyword. Naming styles Overview Type Public Internal Packages lowernounder Modules lower_with_under _lower_with_under Classes CapWords _CapWords Exceptions CapWords or CapWordsError Functions lower_with_under() _lower_with_under() Class Constants CAPS_WITH_UNDER _CAPS_WITH_UNDER Class Variables lower_with_under _lower_with_under Instance Variables lower_with_under _lower_with_under (protected) or __lower_with_under (private) Method Names lower_with_under(self) _lower_with_under(self) (protected) or __lower_with_under(self) (private) Function/Method Parameters lower_with_under Local Variables lower_with_under Real Pyhton naming styles Private variables doesn't exists in python, you just give them a different name. Single and double underscore Single Trailing Underscore( var_ ): Used by convention to avoid naming conflicts with Python keywords. Double Leading Underscore( __var ): Triggers name mangling when used in a class context. Enforced by the Python interpreter.","title":"Python"},{"location":"python/#how-we-used-python","text":"Here are some best-practices for python.","title":"How we used Python"},{"location":"python/#constructs-we-use","text":"","title":"Constructs we use"},{"location":"python/#__init__","text":"Is the constructor for a class.","title":"__init__"},{"location":"python/#__main__-top-level-code-environment","text":"__main__ is the name of the environment where top-level code is run. It's the first Python module which starts running. It's the entry point of the application. See source for more information.","title":"__main__ \u2014 Top-level code environment"},{"location":"python/#property-decorator","text":"For creating properties, we used the Property Decorator .","title":"Property Decorator"},{"location":"python/#modules","text":"A module can be a collection of classes.","title":"Modules"},{"location":"python/#classes","text":"Rover is a class (can be more than one) map is also a class window is also a class (need inheritance from tk)","title":"Classes"},{"location":"python/#inheritance-in-python","text":"See Inheritance for more information. To call the parent method use the super() keyword. To call the current method of the class, use the self keyword.","title":"Inheritance in Python"},{"location":"python/#naming-styles","text":"","title":"Naming styles"},{"location":"python/#overview","text":"Type Public Internal Packages lowernounder Modules lower_with_under _lower_with_under Classes CapWords _CapWords Exceptions CapWords or CapWordsError Functions lower_with_under() _lower_with_under() Class Constants CAPS_WITH_UNDER _CAPS_WITH_UNDER Class Variables lower_with_under _lower_with_under Instance Variables lower_with_under _lower_with_under (protected) or __lower_with_under (private) Method Names lower_with_under(self) _lower_with_under(self) (protected) or __lower_with_under(self) (private) Function/Method Parameters lower_with_under Local Variables lower_with_under Real Pyhton naming styles Private variables doesn't exists in python, you just give them a different name.","title":"Overview"},{"location":"python/#single-and-double-underscore","text":"Single Trailing Underscore( var_ ): Used by convention to avoid naming conflicts with Python keywords. Double Leading Underscore( __var ): Triggers name mangling when used in a class context. Enforced by the Python interpreter.","title":"Single and double underscore"},{"location":"architecture/diagrams/","text":"Diagrams Pyreverse Generate Class Diagram with pyreverse . pyreverse -o puml spacerover -m y","title":"Diagrams"},{"location":"architecture/diagrams/#diagrams","text":"","title":"Diagrams"},{"location":"architecture/diagrams/#pyreverse","text":"Generate Class Diagram with pyreverse . pyreverse -o puml spacerover -m y","title":"Pyreverse"},{"location":"architecture/overview/","text":"Architecture Overview Workflows rover can move forward / backwards / left / right. (if one movement should be deactivated, they have to be splitted worklows) When roves is moved, there has to be a check if move is possible or blocked because of an obstacle. Dependencies All imported Modules which are not created by us, will be wrapped. This makes it easy to replace them with other ones and the dependency are clear. Method naming Method names should be an extended description on what the method actually does. Long method names are allowed. Class Diagram Packages","title":"Overview"},{"location":"architecture/overview/#architecture-overview","text":"","title":"Architecture Overview"},{"location":"architecture/overview/#workflows","text":"rover can move forward / backwards / left / right. (if one movement should be deactivated, they have to be splitted worklows) When roves is moved, there has to be a check if move is possible or blocked because of an obstacle.","title":"Workflows"},{"location":"architecture/overview/#dependencies","text":"All imported Modules which are not created by us, will be wrapped. This makes it easy to replace them with other ones and the dependency are clear.","title":"Dependencies"},{"location":"architecture/overview/#method-naming","text":"Method names should be an extended description on what the method actually does. Long method names are allowed.","title":"Method naming"},{"location":"architecture/overview/#class-diagram","text":"","title":"Class Diagram"},{"location":"architecture/overview/#packages","text":"","title":"Packages"},{"location":"release_notes/1.0.0/","text":"Release 1.0.0 Software Changes Codebase created for spacerover game. Start and enpoint implementet. Start menu implemented, with a Start and Quit Button. Rover moevement implemented Rover can't hit obstacles. Infrastructure Github Actions added for code linting and github pages deployment. MkDocs documentation added for technical documentation.","title":"1.0.0"},{"location":"release_notes/1.0.0/#release-100","text":"","title":"Release 1.0.0"},{"location":"release_notes/1.0.0/#software-changes","text":"Codebase created for spacerover game. Start and enpoint implementet. Start menu implemented, with a Start and Quit Button. Rover moevement implemented Rover can't hit obstacles.","title":"Software Changes"},{"location":"release_notes/1.0.0/#infrastructure","text":"Github Actions added for code linting and github pages deployment. MkDocs documentation added for technical documentation.","title":"Infrastructure"},{"location":"release_notes/info/","text":"Information Semantic versioning Planned releases","title":"Information"},{"location":"release_notes/info/#information","text":"","title":"Information"},{"location":"release_notes/info/#semantic-versioning","text":"","title":"Semantic versioning"},{"location":"release_notes/info/#planned-releases","text":"","title":"Planned releases"},{"location":"venv/Lib/site-packages/Markdown-3.4.4.dist-info/LICENSE/","text":"Copyright 2007, 2008 The Python Markdown Project (v. 1.7 and later) Copyright 2004, 2005, 2006 Yuri Takhteyev (v. 0.2-1.6b) Copyright 2004 Manfred Stienstra (the original version) All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the Python Markdown Project nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE PYTHON MARKDOWN PROJECT ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ANY CONTRIBUTORS TO THE PYTHON MARKDOWN PROJECT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"LICENSE"}]}