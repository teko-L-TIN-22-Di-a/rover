@startuml classes
set namespaceSeparator none
class "EnumMeta" as .EnumMeta {
}
class "LevelOne" as spacerover.level_one.LevelOne {
  TEXT_COL : tuple
  background_image
  cols : int
  endpoint_image
  endpoint_image_rect
  font
  game_paused : bool
  obstacles : Obstacle[]
  pygame_wrapper : PygameWrapper
  rover : Rover
  rows : int
  screen
  screen_height : int
  screen_width : int
  startpoint_image : int
  startpoint_image_rect
  titleFont
  open()
}

class "MainMenu" as spacerover.main_menu.MainMenu {
  button_location_left : int
  screen
  screen_height : int
  screen_height : int
  start_button_location_top : int
  quit_button_location_top : int
  game()
  open()
  options()
}

class "Obstacle" as spacerover.obstacle.Obstacle {
  image
  pygame_wrapper : PygameWrapper
  rect
  draw(screen)
}

class "PygameWrapper" as spacerover.pygame_wrapper.PygameWrapper {
  Coordinate : PygameWrapper.Coordinate
  key_a
  key_d
  key_down
  key_left
  key_right
  key_s
  key_up
  key_w
  Clock(): Pygame.time.Clock
  Rect(left: float, top: float, width: float, height: float) : pygame.Rect
  create_button(button_location_left: int, button_location_top: int, button_width: int, button_height: int) : pygame.Rect
  create_font(font: str, fontSize: int) : pygame.font
  display_flip()
  display_set_mode(size: Coordinate) : pygame.Surface
  display_update() : 
  draw_rect(surface, color, rect, width: int)
  get_event() : List[Event]
  get_event_type_kescape() : int
  get_event_type_keydown() : int
  get_event_type_mousebuttondown() : int
  get_event_type_quit() : int
  get_key_pressed() : int
  get_mouse_position() : Tuple[int, int]
  load_image(image_path: str) : pygame.Surface
  quit()
  quit_game()
  rotate_image(image, angle) : pygame.Surface
  set_window_caption(window_title: str)
  transform_background_image(image, factor) : pygame.Surface
  transform_image(image, factor) : pygame.Surface
}

class "Rover" as spacerover.rover.Rover {
  direction : Enum
  directions : Literal[]
  endpoint_reached : bool
  image : pygame.Surface
  pygame_wrapper : PygameWrapper
  rect : PygameWrapper.Rect
  speed : int
  hit_endpoint(endpoint)
  keys_move_down_pressed(keys)
  keys_move_left_pressed(keys)
  keys_move_right_pressed(keys)
  keys_move_up_pressed(keys)
  listen_to_movement(endpoint, obstacles: Obstacle[])
  move_down(collide_list, endpoint)
  move_left(collide_list, endpoint)
  move_possible_right(obstacles: Obstacle[], new_position)
  move_possible_top(obstacles: Obstacle[], new_position)
  move_right(collide_list, endpoint)
  move_up(collide_list, endpoint)
  rotate_image_down()
  rotate_image_left()
  rotate_image_right()
  rotate_image_up()
} 

class "Union" as .Union {
}

class "directions" as spacerover.rover.Rover.directions {
  down
  left
  right
  up
}

spacerover.main_menu.MainMenu ..> "<<instantiate>> level_one" spacerover.level_one.LevelOne
spacerover.main_menu.MainMenu ..> "<<instantiate>> \r pygame_wrapper \n\n\n\n\n\n\n\n" spacerover.pygame_wrapper.PygameWrapper

spacerover.level_one.LevelOne ..> "<<instantiate>> rover" spacerover.rover.Rover
spacerover.level_one.LevelOne ..> "<<instantiate>> \r pygame_wrapper \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" spacerover.pygame_wrapper.PygameWrapper
spacerover.level_one.LevelOne ..> "<<instantiate>> obstacles" spacerover.obstacle.Obstacle

spacerover.rover.Rover ..> "<<instantiate>> \r pygame_wrapper \n" spacerover.pygame_wrapper.PygameWrapper
spacerover.rover.Rover.directions --|> .EnumMeta
spacerover.rover.Rover.directions --* spacerover.rover.Rover : directions
spacerover.rover.Rover ..> "<<instantiate>> obstacles" spacerover.obstacle.Obstacle

PyGame --* spacerover.pygame_wrapper.PygameWrapper

.Union --* spacerover.pygame_wrapper.PygameWrapper : Coordinate
@enduml
