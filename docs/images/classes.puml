@startuml classes
set namespaceSeparator none
class "EnumMeta" as .EnumMeta {
}
class "LevelOne" as spacerover.level_one.LevelOne {
  + background_image: pygame.Surface
  + game_paused : bool
  - rover : Rover
  - obstacles : Obstacle[]
  - screen : pygame.Surface
  - endpoint_image : pygame.Surface
  - endpoint_image_rect : pygame.Rect
  - pygame_wrapper : PygameWrapper
  - screen_height : int
  - screen_width : int
  - startpoint_image : pygame.Surface
  - startpoint_image_rect : pygame.Rect
  - titleFont : pygame.font
  + open()
  - set_screen()
  - load_background_image()
  - load_startpoint()
  - draw_text()
  - load_startpoint()
  - load_endpoint()
  - load_obstacles()
  - draw_obstacles()
}

class "MainMenu" as spacerover.main_menu.MainMenu {
  - button_location_left : int
  - screen : pygame.Surface
  - screen_height : int
  - screen_height : int
  - start_button_location_top : int
  - quit_button_location_top : int
  + game()
  + open()
  + options()
  - draw_text()
  - set_screen()
}

class "Obstacle" as spacerover.obstacle.Obstacle {
  + image : pygame.Surface
  + rect : pygame.Rect
  - pygame_wrapper : PygameWrapper
  + draw(screen : pygame.Surface)
}

class "PygameWrapper" as spacerover.pygame_wrapper.PygameWrapper {
  Coordinate : PygameWrapper.Coordinate
  + key_a : int
  + key_d : int
  + key_down : int
  + key_left : int
  + key_right : int
  + key_s : int
  + key_up : int
  + key_w : int
  + Clock(): Pygame.time.Clock
  + Rect(left: float, top: float, width: float, height: float) : pygame.Rect
  + create_button(button_location_left: int, button_location_top: int, button_width: int, button_height: int) : pygame.Rect
  + create_font(font: str, fontSize: int) : pygame.font
  + display_flip()
  + display_set_mode(size: Coordinate) : pygame.Surface
  + display_update() : 
  + draw_rect(surface, color, rect, width: int)
  + get_event() : List[Event]
  + get_event_type_kescape() : int
  + get_event_type_keydown() : int
  + get_event_type_mousebuttondown() : int
  + get_event_type_quit() : int
  + get_key_pressed() : int
  + get_mouse_position() : Tuple[int, int]
  + load_image(image_path: str) : pygame.Surface
  + quit()
  + quit_game()
  + rotate_image(image, angle) : pygame.Surface
  + set_window_caption(window_title: str)
  + transform_background_image(image, factor) : pygame.Surface
  + transform_image(image, factor) : pygame.Surface
}

class "Rover" as spacerover.rover.Rover {
  + direction : Enum
  + directions : Literal[]
  + endpoint_reached : bool
  + image : pygame.Surface
  + rect : pygame.Rect
  + speed : int
  - pygame_wrapper : PygameWrapper
  + listen_to_movement(endpoint, obstacles: Obstacle[])
  - load_image()
  - keys_move_up_pressed(keys)
  - keys_move_down_pressed(keys)
  - keys_move_left_pressed(keys)
  - keys_move_right_pressed(keys)
  - move_up(collide_list, endpoint)
  - move_down(collide_list, endpoint)
  - move_left(collide_list, endpoint)
  - move_right(collide_list, endpoint)
  - move_possible_top(obstacles: Obstacle[], new_position)
  - move_possible_right(obstacles: Obstacle[], new_position)
  - rotate_image_up()
  - rotate_image_down()
  - rotate_image_left()
  - rotate_image_right()
  - hit_endpoint(endpoint)
} 

class "Union" as .Union {
}

legend left
  Legend

  |= field  |= method |
  |  <img:http://s.plantuml.com/private-field.png>  |  private |
  |  <img:http://s.plantuml.com/protected-field.png>  |  protected |
  |  <img:http://s.plantuml.com/package-private-field.png>  |  package private |
  |  <img:http://s.plantuml.com/public-field.png> |  public |
endlegend

spacerover.main_menu.MainMenu ..> "<<instantiate>> level_one" spacerover.level_one.LevelOne
spacerover.main_menu.MainMenu ..> "<<instantiate>> \r pygame_wrapper \r\n\r\n\r\n" spacerover.pygame_wrapper.PygameWrapper

spacerover.level_one.LevelOne ..> "<<instantiate>> rover" spacerover.rover.Rover
spacerover.level_one.LevelOne ..> "<<instantiate>> \r pygame_wrapper \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n" spacerover.pygame_wrapper.PygameWrapper
spacerover.level_one.LevelOne ..> "<<instantiate>> obstacles \r\n" spacerover.obstacle.Obstacle

spacerover.rover.Rover ..> "<<instantiate>> \r pygame_wrapper \n" spacerover.pygame_wrapper.PygameWrapper
spacerover.rover.Rover ..>  "<<instantiate>> directions  \r\n" .EnumMeta

spacerover.rover.Rover ..> "<<instantiate>> obstacles \r\n\r\n\r\n" spacerover.obstacle.Obstacle

PyGame --* spacerover.pygame_wrapper.PygameWrapper

.Union --* spacerover.pygame_wrapper.PygameWrapper : Coordinate
@enduml
